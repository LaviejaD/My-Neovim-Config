snippet ec
extern crate $1;
endsnippet

snippet eca
extern crate $1 as $2;
endsnippet

snippet us
use $1;
endsnippet

snippet usa
use $1 as $2;
endsnippet

snippet usb
use $1::{$2};
endsnippet

snippet us*
use $1::*;
endsnippet

snippet mo
mod $1;
endsnippet

snippet mob
mod $1 {
    $0
}
endsnippet

snippet le
let $1 = $2;
endsnippet

snippet lem
let mut $1 = $2;
endsnippet

snippet ler
let ref $1 = $2;
endsnippet

snippet lerm
let ref mut $1 = $2;
endsnippet

snippet if
if $1 {
    $2
}
endsnippet

snippet ife
if $1 {
    $2
} else {
    $3
}
endsnippet

snippet ifl
if let $1 = $2 {
    $3
}
endsnippet

snippet el
else {
    $1
}
endsnippet

snippet ma
match $1 {
    $2 => $3,
    $4 => $5,$6
}
endsnippet

snippet fo
for $1 in $2 {
    $3
}
endsnippet

snippet ty
type $1 = $2;
endsnippet

snippet tyg
type $1<${2:T}> = $3<$2>$4;
endsnippet

snippet st
$1struct $2 {
    $3
}
endsnippet

snippet stg
$1struct $2<${3:T}> $4{
    $5
}
endsnippet

snippet sti
$1struct $2 {
    $3
}

impl $2 {
    $4
}
endsnippet

snippet stig
$1struct $2<${3:T}> $4{
    $5
}

impl<$3> $2<$3> $6{
    $7
}
endsnippet

snippet en
$1enum $2 {
    $3
}
endsnippet

snippet eng
$1enum $2<${3:T}> $4{
    $5
}
endsnippet

snippet eni
$1enum $2 {
    $3
}

impl $2 {
    $4
}
endsnippet

snippet enig
$1enum $2<${3:T}> $4{
    $5
}

impl<$3> $2<$3> $6{
    $7
}
endsnippet

snippet tr
$1trait $2 {
    $3
}
endsnippet

snippet trg
$1trait $2<${3:T}> $4{
    $5
}
endsnippet

snippet im
impl $1 {
    $2
}
endsnippet

snippet imf
impl $1 for $2 {
    $3
}
endsnippet

snippet img
impl<${1:T}> $2 {
    $3
}
endsnippet

snippet fn
$1fn ${2:f}($3) $4{
    $5
}
endsnippet

snippet |
${1:move }|$2| {
    $3
}
endsnippet

snippet new
$1fn new($2) -> $3Self {
    $4
}
endsnippet

snippet main
fn main() {
    $1
}
endsnippet

snippet opt
Option<$1>
endsnippet

snippet res
$1Result<$2>
endsnippet

snippet from
impl From<$1> for $2 {
    fn from(${3:val}: $1) -> Self {
        $4
    }
}
endsnippet

snippet pdb
println!("$1 = {:?}", $1);
endsnippet

snippet pln
println!($1);
endsnippet

snippet ass
assert!($1);
endsnippet

snippet asse
assert_eq!($1, $2);
endsnippet

snippet vec
vec![$1]
endsnippet

snippet un
unimplemented!() // TODO
endsnippet

snippet unr
unreachable!($1)
endsnippet

snippet mr
macro_rules! $1 {
    ($2) => {
        $3
    };
}
endsnippet

snippet test
#[test]
fn test_$1() {
    $2
}
endsnippet

snippet testm
#[cfg(test)]
mod test_${1:super} {
    ${2:use super::*;}

    #[test]
    fn test_$3() {
        $4
    }
}
endsnippet

snippet #
#[${1:name}($2)]
endsnippet

snippet cfg
#[cfg($1)]
endsnippet

snippet cff
#[cfg(feature = "$1")]
endsnippet

snippet drv
#[derive($1)]
endsnippet

snippet drv*
#[derive(Copy, Clone, Debug, Default, PartialEq, Eq$1)]
endsnippet

snippet todo
// TODO: ${1:...}
endsnippet
